import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const kieApiKey = '1a9889450d5f2eb9cc9ff08dc77313e9';

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

    // Get the authorization header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    // Get user from JWT
    const { data: { user }, error: userError } = await supabase.auth.getUser(
      authHeader.replace('Bearer ', '')
    );

    if (userError || !user) {
      console.error('Authentication error:', userError);
      throw new Error('Authentication failed');
    }

    const { imageUrl } = await req.json();

    if (!imageUrl) {
      throw new Error('Image URL is required');
    }

    console.log('Processing caricature generation for user:', user.id);

    // Check current generation count
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('caricature_generation_count')
      .eq('user_id', user.id)
      .single();

    if (profileError) {
      console.error('Profile fetch error:', profileError);
      throw new Error('Failed to fetch user profile');
    }

    const currentCount = profile?.caricature_generation_count || 0;
    if (currentCount >= 3) {
      throw new Error('Maximum caricature generations reached (3)');
    }

    console.log('Sending request to KIE AI Flux API...');

    // Send request to Flux Midjourney API
    const fluxResponse = await fetch('https://api.kie.ai/v1/midjourney/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${kieApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: "Create a detailed caricature portrait of a fitness and wellness enthusiast based on the uploaded photo. Capture athletic features, healthy glow, and playful energy. Stylized, fun, vibrant background, fit lifestyle elements (e.g. yoga mat, smoothie, gym gear, running shoes).",
        image_url: imageUrl,
        style: "caricature",
        aspect_ratio: "1:1"
      }),
    });

    if (!fluxResponse.ok) {
      const errorText = await fluxResponse.text();
      console.error('Flux API error:', errorText);
      throw new Error(`Flux API failed: ${fluxResponse.status} - ${errorText}`);
    }

    const fluxData = await fluxResponse.json();
    console.log('Flux API response:', fluxData);

    // Extract image URLs from the response
    const generatedImages = fluxData.images || fluxData.data || [];
    
    if (!generatedImages.length) {
      throw new Error('No images generated by Flux API');
    }

    // Take up to 3 images
    const imageUrls = generatedImages.slice(0, 3);
    
    // Store images in Supabase Storage
    const storedUrls = [];
    
    for (let i = 0; i < imageUrls.length; i++) {
      const imageUrl = imageUrls[i];
      
      try {
        // Download the image
        const imageResponse = await fetch(imageUrl);
        if (!imageResponse.ok) {
          console.error(`Failed to download image ${i + 1}:`, imageResponse.status);
          continue;
        }
        
        const imageBlob = await imageResponse.blob();
        const imageBuffer = await imageBlob.arrayBuffer();
        
        // Upload to Supabase Storage
        const fileName = `${user.id}/${i + 1}.png`;
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('caricatures')
          .upload(fileName, imageBuffer, {
            contentType: 'image/png',
            upsert: true
          });

        if (uploadError) {
          console.error(`Upload error for image ${i + 1}:`, uploadError);
          continue;
        }

        // Get public URL
        const { data: urlData } = supabase.storage
          .from('caricatures')
          .getPublicUrl(fileName);

        storedUrls.push(urlData.publicUrl);
        console.log(`Stored image ${i + 1} at:`, urlData.publicUrl);
      } catch (error) {
        console.error(`Error processing image ${i + 1}:`, error);
      }
    }

    if (storedUrls.length === 0) {
      throw new Error('Failed to store any generated images');
    }

    // Update user profile with caricature URLs and increment generation count
    const { error: updateError } = await supabase
      .from('user_profiles')
      .update({
        caricature_urls: storedUrls,
        caricature_generation_count: currentCount + 1,
        updated_at: new Date().toISOString()
      })
      .eq('user_id', user.id);

    if (updateError) {
      console.error('Profile update error:', updateError);
      throw new Error('Failed to update user profile');
    }

    console.log('Successfully generated and stored caricatures:', storedUrls);

    return new Response(
      JSON.stringify({
        success: true,
        caricatureUrls: storedUrls,
        generationCount: currentCount + 1
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('Error in generateCaricatureImage function:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});